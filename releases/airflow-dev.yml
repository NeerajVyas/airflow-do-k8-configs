apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  name: airflow
  namespace: dev
  annotations:
    flux.weave.works/automated: "true"
spec:
  releaseName: airflow-dev
  chart:
    repository: https://marclamberti.github.io/airflow-eks-helm-chart
    name: airflow
    version: 1.0.0
  values:
    fernetKey: "zTxhk7FuGqQVPZVoukLn5bGWOrgHzhQnBnaqAItcZGI="
    env:
      - name: "AIRFLOW__KUBERNETES__DAGS_IN_IMAGE"
        value: "False"
      - name: "AIRFLOW__KUBERNETES__NAMESPACE"
        value: "dev"
      - name: "AIRFLOW__KUBERNETES__WORKER_CONTAINER_REPOSITORY"
        value: "apache/airflow"
      - name: "AIRFLOW__KUBERNETES__WORKER_CONTAINER_TAG"
        value: "1.10.10.1-alpha2-python3.7"
      - name: "AIRFLOW__KUBERNETES__RUN_AS_USER"
        value: "50000"
      - name: "AIRFLOW__CORE__LOAD_EXAMPLES"
        value: "False"
    executor: "KubernetesExecutor"
    dags:
      persistence:
        # Enable persistent volume for storing dags
        enabled: false
        # Volume size for dags
        size: 1Gi
        # If using a custom storageClass, pass name here
        storageClassName:
        # access mode of the persistent volume
        accessMode: ReadWriteMany
        ## the name of an existing PVC to use
        existingClaim: ~
      gitSync:
        enabled: false
        # git repo clone url
        # ssh examples ssh://git@github.com/apache/airflow.git
        # git@github.com:apache/airflow.git
        # https example: https://github.com/apache/airflow.git
        repo: https://github.com/NeerajVyas/airflow-dags.git
        branch: master
        rev: HEAD
        root: "/git"
        dest: "repo"
        depth: 1
        # the number of consecutive failures allowed before aborting
        maxFailures: 0
        # subpath within the repo where dags are located
        # should be "" if dags are at repo root
        #in your git path we can specify the dags folder ex: RS-ETL/ETL-INGEST/airflow/dags
        subPath: ""
        # if your repo needs a user name password
        # you can load them to a k8s secret like the one below
        #   ---
        #   apiVersion: v1
        #   kind: Secret
        #   metadata:
        #     name: git-credentials
        #   data:
        #     GIT_SYNC_USERNAME: <base64_encoded_git_username>
        #     GIT_SYNC_PASSWORD: <base64_encoded_git_password>
        # and specify the name of the secret below
        #credentialsSecret: git-credentials
        #
        #
        # If you are using an ssh clone url, you can load
        # the ssh private key to a k8s secret like the one below
        #   ---
        #   apiVersion: v1
        #   kind: Secret
        #   metadata:
        #     name: airflow-ssh-secret
        #   data:
        #     # key needs to be gitSshKey
        #     gitSshKey: <base64_encoded_data>
        # and specify the name of the secret below
        #sshKeySecret: airflow-ssh-secret
        # If you are using an ssh private key, you can additionally
        # specify the content of your known_hosts file, example:
        #knownHosts: |
        #    <host1>,<ip1> <key1>
        #    <host2>,<ip2> <key2>
        # interval between git sync attempts in seconds
        wait: 60
        # git sync image details
        # containerRepository: k8s.gcr.io/git-sync
        # containerTag: v3.1.6
        # containerName: git-sync
